// Generated by rstantools.  Do not edit by hand.

/*
    titanic is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    titanic is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with titanic.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_age_gender_class_model_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_age_gender_class_model");
    reader.add_event(53, 51, "end", "model_age_gender_class_model");
    return reader;
}
#include <stan_meta_header.hpp>
class model_age_gender_class_model
  : public stan::model::model_base_crtp<model_age_gender_class_model> {
private:
        int N;
        std::vector<int> survived;
        vector_d age;
        vector_d class_1;
        vector_d class_2;
        vector_d class_3;
        int sex;
        std::vector<int> sex_idx;
        int test_N;
        vector_d test_age;
        vector_d test_class_1;
        vector_d test_class_2;
        vector_d test_class_3;
        std::vector<int> test_sex_idx;
public:
    model_age_gender_class_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_age_gender_class_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_age_gender_class_model_namespace::model_age_gender_class_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 4;
            validate_non_negative_index("survived", "N", N);
            context__.validate_dims("data initialization", "survived", "int", context__.to_vec(N));
            survived = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("survived");
            pos__ = 0;
            size_t survived_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < survived_k_0_max__; ++k_0__) {
                survived[k_0__] = vals_i__[pos__++];
            }
            size_t survived_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < survived_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "survived[i_0__]", survived[i_0__], 0);
                check_less_or_equal(function__, "survived[i_0__]", survived[i_0__], 1);
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("age", "N", N);
            context__.validate_dims("data initialization", "age", "vector_d", context__.to_vec(N));
            age = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("age");
            pos__ = 0;
            size_t age_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < age_j_1_max__; ++j_1__) {
                age(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "age", age, 0);
            current_statement_begin__ = 6;
            validate_non_negative_index("class_1", "N", N);
            context__.validate_dims("data initialization", "class_1", "vector_d", context__.to_vec(N));
            class_1 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("class_1");
            pos__ = 0;
            size_t class_1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < class_1_j_1_max__; ++j_1__) {
                class_1(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "class_1", class_1, 0);
            check_less_or_equal(function__, "class_1", class_1, 1);
            current_statement_begin__ = 7;
            validate_non_negative_index("class_2", "N", N);
            context__.validate_dims("data initialization", "class_2", "vector_d", context__.to_vec(N));
            class_2 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("class_2");
            pos__ = 0;
            size_t class_2_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < class_2_j_1_max__; ++j_1__) {
                class_2(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "class_2", class_2, 0);
            check_less_or_equal(function__, "class_2", class_2, 1);
            current_statement_begin__ = 8;
            validate_non_negative_index("class_3", "N", N);
            context__.validate_dims("data initialization", "class_3", "vector_d", context__.to_vec(N));
            class_3 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("class_3");
            pos__ = 0;
            size_t class_3_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < class_3_j_1_max__; ++j_1__) {
                class_3(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "class_3", class_3, 0);
            check_less_or_equal(function__, "class_3", class_3, 1);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "sex", "int", context__.to_vec());
            sex = int(0);
            vals_i__ = context__.vals_i("sex");
            pos__ = 0;
            sex = vals_i__[pos__++];
            check_greater_or_equal(function__, "sex", sex, 0);
            current_statement_begin__ = 10;
            validate_non_negative_index("sex_idx", "N", N);
            context__.validate_dims("data initialization", "sex_idx", "int", context__.to_vec(N));
            sex_idx = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("sex_idx");
            pos__ = 0;
            size_t sex_idx_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < sex_idx_k_0_max__; ++k_0__) {
                sex_idx[k_0__] = vals_i__[pos__++];
            }
            size_t sex_idx_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < sex_idx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sex_idx[i_0__]", sex_idx[i_0__], 1);
                check_less_or_equal(function__, "sex_idx[i_0__]", sex_idx[i_0__], sex);
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "test_N", "int", context__.to_vec());
            test_N = int(0);
            vals_i__ = context__.vals_i("test_N");
            pos__ = 0;
            test_N = vals_i__[pos__++];
            check_greater_or_equal(function__, "test_N", test_N, 0);
            current_statement_begin__ = 14;
            validate_non_negative_index("test_age", "test_N", test_N);
            context__.validate_dims("data initialization", "test_age", "vector_d", context__.to_vec(test_N));
            test_age = Eigen::Matrix<double, Eigen::Dynamic, 1>(test_N);
            vals_r__ = context__.vals_r("test_age");
            pos__ = 0;
            size_t test_age_j_1_max__ = test_N;
            for (size_t j_1__ = 0; j_1__ < test_age_j_1_max__; ++j_1__) {
                test_age(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "test_age", test_age, 0);
            current_statement_begin__ = 15;
            validate_non_negative_index("test_class_1", "test_N", test_N);
            context__.validate_dims("data initialization", "test_class_1", "vector_d", context__.to_vec(test_N));
            test_class_1 = Eigen::Matrix<double, Eigen::Dynamic, 1>(test_N);
            vals_r__ = context__.vals_r("test_class_1");
            pos__ = 0;
            size_t test_class_1_j_1_max__ = test_N;
            for (size_t j_1__ = 0; j_1__ < test_class_1_j_1_max__; ++j_1__) {
                test_class_1(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "test_class_1", test_class_1, 0);
            check_less_or_equal(function__, "test_class_1", test_class_1, 1);
            current_statement_begin__ = 16;
            validate_non_negative_index("test_class_2", "test_N", test_N);
            context__.validate_dims("data initialization", "test_class_2", "vector_d", context__.to_vec(test_N));
            test_class_2 = Eigen::Matrix<double, Eigen::Dynamic, 1>(test_N);
            vals_r__ = context__.vals_r("test_class_2");
            pos__ = 0;
            size_t test_class_2_j_1_max__ = test_N;
            for (size_t j_1__ = 0; j_1__ < test_class_2_j_1_max__; ++j_1__) {
                test_class_2(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "test_class_2", test_class_2, 0);
            check_less_or_equal(function__, "test_class_2", test_class_2, 1);
            current_statement_begin__ = 17;
            validate_non_negative_index("test_class_3", "test_N", test_N);
            context__.validate_dims("data initialization", "test_class_3", "vector_d", context__.to_vec(test_N));
            test_class_3 = Eigen::Matrix<double, Eigen::Dynamic, 1>(test_N);
            vals_r__ = context__.vals_r("test_class_3");
            pos__ = 0;
            size_t test_class_3_j_1_max__ = test_N;
            for (size_t j_1__ = 0; j_1__ < test_class_3_j_1_max__; ++j_1__) {
                test_class_3(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "test_class_3", test_class_3, 0);
            check_less_or_equal(function__, "test_class_3", test_class_3, 1);
            current_statement_begin__ = 19;
            validate_non_negative_index("test_sex_idx", "test_N", test_N);
            context__.validate_dims("data initialization", "test_sex_idx", "int", context__.to_vec(test_N));
            test_sex_idx = std::vector<int>(test_N, int(0));
            vals_i__ = context__.vals_i("test_sex_idx");
            pos__ = 0;
            size_t test_sex_idx_k_0_max__ = test_N;
            for (size_t k_0__ = 0; k_0__ < test_sex_idx_k_0_max__; ++k_0__) {
                test_sex_idx[k_0__] = vals_i__[pos__++];
            }
            size_t test_sex_idx_i_0_max__ = test_N;
            for (size_t i_0__ = 0; i_0__ < test_sex_idx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "test_sex_idx[i_0__]", test_sex_idx[i_0__], 1);
                check_less_or_equal(function__, "test_sex_idx[i_0__]", test_sex_idx[i_0__], sex);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 23;
            num_params_r__ += 1;
            current_statement_begin__ = 24;
            num_params_r__ += 1;
            current_statement_begin__ = 25;
            num_params_r__ += 1;
            current_statement_begin__ = 26;
            num_params_r__ += 1;
            current_statement_begin__ = 27;
            validate_non_negative_index("alpha", "sex", sex);
            num_params_r__ += sex;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_age_gender_class_model() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 23;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta", "double", context__.to_vec());
        double beta(0);
        beta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("beta_class_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_class_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_class_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_class_1", "double", context__.to_vec());
        double beta_class_1(0);
        beta_class_1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_class_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_class_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("beta_class_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_class_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_class_2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_class_2", "double", context__.to_vec());
        double beta_class_2(0);
        beta_class_2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_class_2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_class_2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("beta_class_3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_class_3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_class_3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_class_3", "double", context__.to_vec());
        double beta_class_3(0);
        beta_class_3 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_class_3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_class_3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "sex", sex);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(sex));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(sex);
        size_t alpha_j_1_max__ = sex;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 23;
            local_scalar_t__ beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.scalar_constrain(lp__);
            else
                beta = in__.scalar_constrain();
            current_statement_begin__ = 24;
            local_scalar_t__ beta_class_1;
            (void) beta_class_1;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_class_1 = in__.scalar_constrain(lp__);
            else
                beta_class_1 = in__.scalar_constrain();
            current_statement_begin__ = 25;
            local_scalar_t__ beta_class_2;
            (void) beta_class_2;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_class_2 = in__.scalar_constrain(lp__);
            else
                beta_class_2 = in__.scalar_constrain();
            current_statement_begin__ = 26;
            local_scalar_t__ beta_class_3;
            (void) beta_class_3;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_class_3 = in__.scalar_constrain(lp__);
            else
                beta_class_3 = in__.scalar_constrain();
            current_statement_begin__ = 27;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_constrain(sex, lp__);
            else
                alpha = in__.vector_constrain(sex);
            // model body
            current_statement_begin__ = 31;
            lp_accum__.add(normal_log<propto__>(beta, 0, 1));
            current_statement_begin__ = 32;
            lp_accum__.add(normal_log<propto__>(beta_class_1, 0, 1));
            current_statement_begin__ = 33;
            lp_accum__.add(normal_log<propto__>(beta_class_2, 0, 1));
            current_statement_begin__ = 34;
            lp_accum__.add(normal_log<propto__>(beta_class_3, 0, 1));
            current_statement_begin__ = 36;
            lp_accum__.add(bernoulli_logit_log<propto__>(survived, add(add(add(add(stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_multi(sex_idx), stan::model::nil_index_list()), "alpha"), multiply(beta, age)), multiply(beta_class_1, class_1)), multiply(beta_class_2, class_2)), multiply(beta_class_3, class_3))));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("beta_class_1");
        names__.push_back("beta_class_2");
        names__.push_back("beta_class_3");
        names__.push_back("alpha");
        names__.push_back("y_new");
        names__.push_back("y_rep");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sex);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(test_N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_age_gender_class_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double beta = in__.scalar_constrain();
        vars__.push_back(beta);
        double beta_class_1 = in__.scalar_constrain();
        vars__.push_back(beta_class_1);
        double beta_class_2 = in__.scalar_constrain();
        vars__.push_back(beta_class_2);
        double beta_class_3 = in__.scalar_constrain();
        vars__.push_back(beta_class_3);
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_constrain(sex);
        size_t alpha_j_1_max__ = sex;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 40;
            validate_non_negative_index("y_new", "test_N", test_N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> y_new(test_N);
            stan::math::initialize(y_new, DUMMY_VAR__);
            stan::math::fill(y_new, DUMMY_VAR__);
            current_statement_begin__ = 41;
            validate_non_negative_index("y_rep", "N", N);
            std::vector<int> y_rep(N, int(0));
            stan::math::fill(y_rep, std::numeric_limits<int>::min());
            // generated quantities statements
            current_statement_begin__ = 43;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 44;
                stan::model::assign(y_rep, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            bernoulli_logit_rng(((((get_base1(alpha, get_base1(sex_idx, n, "sex_idx", 1), "alpha", 1) + (beta * get_base1(age, n, "age", 1))) + (beta_class_1 * get_base1(class_1, n, "class_1", 1))) + (beta_class_2 * get_base1(class_2, n, "class_2", 1))) + (beta_class_3 * get_base1(class_3, n, "class_3", 1))), base_rng__), 
                            "assigning variable y_rep");
            }
            current_statement_begin__ = 48;
            for (int i = 1; i <= test_N; ++i) {
                current_statement_begin__ = 49;
                stan::model::assign(y_new, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            bernoulli_logit_rng(((((get_base1(alpha, get_base1(test_sex_idx, i, "test_sex_idx", 1), "alpha", 1) + (beta * get_base1(test_age, i, "test_age", 1))) + (beta_class_1 * get_base1(test_class_1, i, "test_class_1", 1))) + (beta_class_2 * get_base1(test_class_2, i, "test_class_2", 1))) + (beta_class_3 * get_base1(test_class_3, i, "test_class_3", 1))), base_rng__), 
                            "assigning variable y_new");
            }
            // validate, write generated quantities
            current_statement_begin__ = 40;
            size_t y_new_j_1_max__ = test_N;
            for (size_t j_1__ = 0; j_1__ < y_new_j_1_max__; ++j_1__) {
                vars__.push_back(y_new(j_1__));
            }
            current_statement_begin__ = 41;
            size_t y_rep_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
                vars__.push_back(y_rep[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_age_gender_class_model";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_class_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_class_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_class_3";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_j_1_max__ = sex;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t y_new_j_1_max__ = test_N;
        for (size_t j_1__ = 0; j_1__ < y_new_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_new" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_class_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_class_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_class_3";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_j_1_max__ = sex;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t y_new_j_1_max__ = test_N;
        for (size_t j_1__ = 0; j_1__ < y_new_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_new" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_age_gender_class_model_namespace::model_age_gender_class_model stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
